/** Librerias											**/
#include "xtmrctr.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "xparameters.h"
#include <string.h>


/** Instancia de Controladores							**/
XScuGic INTCInst;
XTmrCtr TMRInst;
XTmrCtr TMRInst1;
//XGpio gpio_luz;

/**Contadores para temporizadores						**/

static int tmr_count0;
static int tmr_count1;
static char state_flag[30];  // Arreglo de caracteres para almacenar el estado actual

/** Macros de configuración								**/
#define INTC_DEVICE_ID 			XPAR_PS7_SCUGIC_0_DEVICE_ID				// Identificador del controlador de interrupciones
#define TMR_DEVICE_ID_0 		XPAR_TMRCTR_0_DEVICE_ID					// Identificador del temporizador 0 (Timer 0)
#define TMR_DEVICE_ID_1 		XPAR_TMRCTR_1_DEVICE_ID

#define INTC_TMR_INTERRUPT_ID_0	PAR_FABRIC_AXI_TIMER_0_INTERRUPT_INTR	// Identificador de interrupcion asociada al temporizador 0
#define INTC_TMR_INTERRUPT_ID_1 XPAR_FABRIC_AXI_TIMER_1_INTERRUPT_INTR

/** Declaracion Prototipos de funciones								**/

static void TMR_Intr_Handler0(void *baseaddr_p);
static void TMR_Intr_Handler1(void *baseaddr_p);
static int InterruptSystemSetup(XScuGic *XScuGicInstancePtr);
static int IntcInitFunction(u16 DeviceId, XGpio *GpioInstancePtr, XTmrCtr *TmrInstancePtr,XTmrCtr *TmrInstancePtr1 );

/** Declaracion  de funciones										**/

// Manejador de interrupción para el temporizador 0
void TMR_Intr_Handler0(void *data) {
    strcpy(state_flag, "Timer 0 interruption process");  // Cambiar estado a Timer 0
    sleep(3);
    if (XTmrCtr_IsExpired(&TimerInst0, 0)) {
        XTmrCtr_Reset(&TimerInst0, 0); // Resetear el temporizador 0
        XTmrCtr_Start(&TimerInst0, 0);
    }

}

// Manejador de interrupción para el temporizador 1
void TMR_Intr_Handler1(void *data) {
    strcpy(state_flag, "Timer 1 interruption process");  // Cambiar estado a Timer 1
    sleep(3);
    if (XTmrCtr_IsExpired(&TimerInst1, 0)) {
        XTmrCtr_Reset(&TimerInst1, 0); // Resetear el temporizador 1
        XTmrCtr_Start(&TimerInst1, 0);
    }

}


/***************** Function declaration *******************/
void TmrCtrIntrExample(INTC    *IntcInstancePtr,
			           XTmrCtr *InstancePtr,
			           u16      DeviceId,
			           u16      IntrId,
			           u8       TmrCtrNumber);

void TmrCtrSetupIntrSystem(INTC    *IntcInstancePtr,
				           XTmrCtr *InstancePtr,
				           u16      DeviceId,
				           u16      IntrId,
				           u8       TmrCtrNumber);

void TimerCounterHandler(void *CallBackRef, u8 TmrCtrNumber);

/***************** IPs Instantiation **********************/


/***************** Main ***********************************/
int main(void){

	XGpio_Initialize(&GPIO, XPAR_GPIO_0_DEVICE_ID); // initialization of GPIO

	TmrCtrIntrExample(&InterruptController, // call to the example we're developing
				      &TimerCounterInst,
				      TMRCTR_DEVICE_ID,
				      TMRCTR_INTERRUPT_ID,
				      TIMER_CNTR_0);


	strcpy(state_flag, "Main Code process");  // Estado inicial en el código principal

	// Ciclo principal
	while (1) {
		// Código del main
		// El valor de state_flag cambiará automáticamente cuando se active una interrupción
		strcpy(state_flag, "Main Code process");  // Estado inicial en el código principal
	}

	return 0;
}

/***************** Function Definition ********************/
void TmrCtrIntrExample(INTC    *IntcInstancePtr,
			           XTmrCtr *TmrCtrInstancePtr,
			           u16      DeviceId,
			           u16      IntrId,
			           u8       TmrCtrNumber)
{
	XTmrCtr_Initialize(TmrCtrInstancePtr, DeviceId); // initialization of TIMER

	TmrCtrSetupIntrSystem(IntcInstancePtr,      // call to the set up function
					      TmrCtrInstancePtr,    // of the interrupt system
					      DeviceId,
					      IntrId,
					      TmrCtrNumber);

	XTmrCtr_SetHandler(TmrCtrInstancePtr, TimerCounterHandler, TmrCtrInstancePtr);

	XTmrCtr_SetOptions(TmrCtrInstancePtr, TmrCtrNumber, XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION);

	XTmrCtr_SetResetValue(TmrCtrInstancePtr, TmrCtrNumber, RESET_VALUE);

	XTmrCtr_Start(TmrCtrInstancePtr, TmrCtrNumber);
}


/***********************************************************/
void TimerCounterHandler(void *CallBackRef, u8 TmrCtrNumber)
{
	// each time and interrupt is generated this is executed
		XGpio_DiscreteWrite(&GPIO, 1, 0xFFFFFFFF);
		usleep(500000);
		XGpio_DiscreteWrite(&GPIO, 1, 0x00000000);
}

/***********************************************************/
void TmrCtrSetupIntrSystem(INTC    *IntcInstancePtr,
				           XTmrCtr *TmrCtrInstancePtr,
				           u16      DeviceId,
				           u16      IntrId,
				           u8       TmrCtrNumber)
{
	XIntc_Initialize(IntcInstancePtr, INTC_DEVICE_ID);

	XIntc_Connect(IntcInstancePtr, IntrId,
				 (XInterruptHandler)XTmrCtr_InterruptHandler,
				 (void *)TmrCtrInstancePtr);

	XIntc_Start(IntcInstancePtr, XIN_REAL_MODE);

	XIntc_Enable(IntcInstancePtr, IntrId);

	Xil_ExceptionInit(); // initialization of Xilinx exceptions subsystem
	                     // necessary before registering our Interrupt Handler

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
					            (Xil_ExceptionHandler)INTC_HANDLER,
					             IntcInstancePtr);

	Xil_ExceptionEnable(); // enables exception management
}
